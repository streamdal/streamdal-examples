"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testDetective = exports.examplePayload = void 0;
const sp_pipeline_1 = require("@streamdal/protos/protos/sp_pipeline");
const sp_wsm_1 = require("@streamdal/protos/protos/sp_wsm");
const sp_steps_transform_1 = require("@streamdal/protos/protos/steps/sp_steps_transform");
const fs = __importStar(require("fs"));
// eslint-disable-next-line import/no-unresolved
const wasi_1 = require("wasi");
const wasm_js_1 = require("./wasm.js");
const wasi = new wasi_1.WASI({
    preopens: {
        "/sandbox": "./",
    },
});
const importObject = { wasi_snapshot_preview1: wasi.wasiImport };
exports.examplePayload = {
    boolean_t: true,
    boolean_f: false,
    object: {
        ipv4_address: "127.0.0.1",
        ipv6_address: "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        mac_address: "00-B0-D0-63-C2-26",
        uuid_dash: "550e8400-e29b-41d4-a716-446655440000",
        uuid_colon: "550e8400:e29b:41d4:a716:446655440000",
        uuid_stripped: "550e8400e29b41d4a716446655440000",
        number_as_string: "1234",
        field: "value",
        empty_string: "",
        null_field: null,
        empty_array: [],
    },
    array: ["value1", "value2"],
    number_int: 100,
    number_float: 100.1,
    timestamp_unix_str: "1614556800",
    timestamp_unix_num: 1614556800,
    timestamp_unix_nano_str: "1614556800000000000",
    timestamp_unix_nano_num: 1614556800000000000,
    timestamp_rfc3339: "2023-06-29T12:34:56Z",
};
const testDetective = (data) => __awaiter(void 0, void 0, void 0, function* () {
    console.info("\n");
    console.info("### start web assembly test");
    const wasm = yield WebAssembly.compile(fs.readFileSync("./wasm/transform.wasm"));
    const instance = yield WebAssembly.instantiate(wasm, importObject);
    const { exports } = instance;
    const { memory, alloc, f } = exports;
    const request = sp_wsm_1.WASMRequest.create({
        step: {
            name: "some-name",
            onSuccess: [sp_pipeline_1.PipelineStepCondition.NOTIFY],
            onFailure: [sp_pipeline_1.PipelineStepCondition.NOTIFY],
            WasmId: "some-wasm",
            WasmBytes: new TextEncoder().encode(JSON.stringify("bytes")),
            WasmFunction: "some-func",
            step: {
                oneofKind: "transform",
                transform: sp_steps_transform_1.TransformStep.create({
                    path: "object.ipv4_address",
                    value: "batman",
                    type: sp_steps_transform_1.TransformType.MASK_VALUE,
                }),
                // detective: DetectiveStep.create({
                //   path: "object.ipv4_address",
                //   args: undefined,
                //   negate: false,
                //   type: DetectiveType.IPV4_ADDRESS,
                // }),
            },
        },
        inputPayload: data,
    });
    console.info("sending the payload to transform/mask step");
    const bytes = sp_wsm_1.WASMRequest.toBinary(request);
    const ptr = alloc(bytes.length);
    const mem = new Uint8Array(memory.buffer, ptr, bytes.length);
    mem.set(bytes);
    const returnPtr = f(ptr, bytes.length);
    const completeBufferFromMemory = new Uint8Array(memory.buffer);
    const content = (0, wasm_js_1.readResponse)(returnPtr, completeBufferFromMemory);
    const resp = sp_wsm_1.WASMResponse.fromBinary(content);
    const output = JSON.parse(new TextDecoder().decode(resp.outputPayload));
    console.info("### end web assembly test");
    return output;
});
exports.testDetective = testDetective;
