"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.clientInfo = exports.version = exports.audienceKey = exports.internal = void 0;
const node_fs_1 = require("node:fs");
const sp_info_1 = require("@streamdal/protos/protos/sp_info");
const pipeline_js_1 = require("./pipeline.js");
const REGISTRATION_RETRY_INTERVAL = 5000;
exports.internal = {
    // we track registered status because we can't await registering
    // in the streamdal constructor
    registered: false,
    pipelineInitialized: false,
    pipelines: new Map(),
    audiences: new Map(),
    wasmModules: new Map(),
};
const audienceKey = (audience) => JSON.stringify(audience).toLowerCase();
exports.audienceKey = audienceKey;
const version = () => {
    try {
        const pkg = JSON.parse((0, node_fs_1.readFileSync)("./package.json").toString());
        return pkg === null || pkg === void 0 ? void 0 : pkg.version;
    }
    catch (e) {
        console.error("Error getting package version");
    }
    return "unknown";
};
exports.version = version;
exports.clientInfo = {
    clientType: sp_info_1.ClientType.SDK,
    libraryName: "node-sdk",
    libraryVersion: (0, exports.version)(),
    language: "Typescript",
    arch: process.arch,
    os: process.platform,
};
const register = (configs) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, e_1, _b, _c;
    try {
        console.info(`### running node-sdk version: ${exports.clientInfo.libraryVersion}`);
        console.info(`### registering with grpc server...`);
        const call = configs.grpcClient.register({
            sessionId: configs.sessionId,
            serviceName: configs.serviceName,
            dryRun: configs.dryRun,
            clientInfo: exports.clientInfo,
            audiences: Array.from(exports.internal.audiences.values()).map((a) => a.audience),
        }, {
            meta: { "auth-token": configs.streamdalToken },
        });
        yield call.headers;
        console.info(`### registered with grpc server`);
        //
        // considering response headers without errors as registered
        exports.internal.registered = true;
        try {
            for (var _d = true, _e = __asyncValues(call.responses), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                _c = _f.value;
                _d = false;
                const response = _c;
                response.command.oneofKind !== "keepAlive" &&
                    console.debug("processing response command...", response);
                (0, pipeline_js_1.processResponse)(response);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    catch (error) {
        exports.internal.registered = false;
        console.error("error registering with grpc server", error);
        setTimeout(() => {
            console.info(`retrying registering with grpc server in ${REGISTRATION_RETRY_INTERVAL / 1000} seconds...`);
            void (0, exports.register)(configs);
        }, REGISTRATION_RETRY_INTERVAL);
    }
});
exports.register = register;
