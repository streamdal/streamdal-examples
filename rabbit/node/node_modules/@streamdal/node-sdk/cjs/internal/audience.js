"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAudience = exports.addAudiences = void 0;
const sp_common_1 = require("@streamdal/protos/protos/sp_common");
const register_js_1 = require("./register.js");
const addAudiences = (configs) => __awaiter(void 0, void 0, void 0, function* () {
    if (!configs.audiences || configs.audiences.length === 0) {
        return;
    }
    for (const audience of configs.audiences) {
        yield (0, exports.addAudience)({ configs, audience });
    }
});
exports.addAudiences = addAudiences;
const addAudience = ({ configs, audience }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (register_js_1.internal.audiences.has((0, register_js_1.audienceKey)(audience))) {
            return;
        }
        const { response } = yield configs.grpcClient.newAudience({
            sessionId: configs.sessionId,
            audience,
        }, { meta: { "auth-token": configs.streamdalToken } });
        if (response.code === sp_common_1.ResponseCode.OK) {
            register_js_1.internal.audiences.set((0, register_js_1.audienceKey)(audience), {
                audience,
                tails: new Map(),
            });
        }
        else {
            console.error("error adding audience", response.message);
        }
    }
    catch (error) {
        console.error("error adding audience", error);
    }
});
exports.addAudience = addAudience;
