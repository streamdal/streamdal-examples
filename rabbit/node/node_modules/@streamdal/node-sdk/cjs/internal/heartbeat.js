"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.heartbeat = exports.HEARTBEAT_INTERVAL = void 0;
const sp_common_1 = require("@streamdal/protos/protos/sp_common");
const register_js_1 = require("./register.js");
exports.HEARTBEAT_INTERVAL = 1000;
const heartbeat = ({ serviceName, grpcClient, sessionId, streamdalToken, }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const heartbeatRequest = {
            sessionId,
            serviceName,
            audiences: Array.from(register_js_1.internal.audiences.values()).map((a) => a.audience),
            clientInfo: register_js_1.clientInfo,
        };
        console.debug("sending heartbeat", heartbeatRequest);
        const call = grpcClient.heartbeat(heartbeatRequest, {
            meta: { "auth-token": streamdalToken },
        });
        const response = yield call.response;
        if (response.code !== sp_common_1.ResponseCode.OK) {
            console.error("Heartbeat error", response.message);
        }
    }
    catch (e) {
        console.error(`error sending heartbeat to server, will try again in ${exports.HEARTBEAT_INTERVAL / 1000} seconds, error: `, e);
    }
});
exports.heartbeat = heartbeat;
