var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Audience, OperationType } from "@streamdal/protos/protos/sp_common";
import { v4 as uuidv4 } from "uuid";
import { addAudiences } from "./internal/audience.js";
import { client } from "./internal/grpc.js";
import { heartbeat, HEARTBEAT_INTERVAL } from "./internal/heartbeat.js";
import { METRIC_INTERVAL, sendMetrics } from "./internal/metrics.js";
import { retryProcessPipeline } from "./internal/process.js";
import { register } from "./internal/register.js";
export { Audience, OperationType };
export class Streamdal {
    constructor({ streamdalUrl, streamdalToken, serviceName, pipelineTimeout, stepTimeout, dryRun, audiences, }) {
        var _a, _b;
        if (process.env.NODE_ENV === "production") {
            console.debug = () => null;
        }
        const url = streamdalUrl ? streamdalUrl : process.env.STREAMDAL_URL;
        const token = streamdalToken ? streamdalToken : process.env.STREAMDAL_TOKEN;
        const name = serviceName ? serviceName : process.env.STREAMDAL_SERVICE_NAME;
        if (!url || !token || !name) {
            throw new Error(`Required configs are missing. You must provide configs streamdalUrl, streamdalToken and serviceName 
        either as constructor arguments to Streamdal() or as environment variables in the form of STREAMDAL_URL, STREAMDAL_TOKEN and STREAMDAL_SERVICE_NAME`);
        }
        const sessionId = uuidv4();
        const grpcClient = client(url);
        this.configs = {
            grpcClient,
            sessionId,
            streamdalUrl: url,
            streamdalToken: token,
            serviceName: name,
            pipelineTimeout: (_a = pipelineTimeout !== null && pipelineTimeout !== void 0 ? pipelineTimeout : process.env.STREAMDAL_PIPELINE_TIMEOUT) !== null && _a !== void 0 ? _a : "100",
            stepTimeout: (_b = stepTimeout !== null && stepTimeout !== void 0 ? stepTimeout : process.env.STREAMDAL_STEP_TIMEOUT) !== null && _b !== void 0 ? _b : "10",
            dryRun: dryRun !== null && dryRun !== void 0 ? dryRun : !!process.env.STREAMDAL_DRY_RUN,
            audiences,
        };
        // Heartbeat is obsolete
        setInterval(() => {
            void heartbeat(this.configs);
        }, HEARTBEAT_INTERVAL);
        setInterval(() => {
            void sendMetrics(this.configs);
        }, METRIC_INTERVAL);
        void addAudiences(this.configs);
        void register(this.configs);
    }
    processPipeline({ audience, data, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return retryProcessPipeline({ configs: this.configs, audience, data });
        });
    }
}
